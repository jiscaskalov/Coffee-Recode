/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.CoffeeMain;
import coffee.client.feature.config.BooleanSetting;
import coffee.client.feature.config.StringSetting;
import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.event.impl.PacketEvent;
import coffee.client.helper.text.RunnableClickEvent;
import coffee.client.helper.util.Utils;
import me.x150.jmessenger.MessageSubscription;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.BrandCustomPayload;
import net.minecraft.network.packet.c2s.common.CustomPayloadC2SPacket;
import net.minecraft.network.packet.c2s.common.ResourcePackStatusC2SPacket;
import net.minecraft.network.packet.s2c.common.ResourcePackSendS2CPacket;
import net.minecraft.text.ClickEvent;
import net.minecraft.text.HoverEvent;
import net.minecraft.text.MutableText;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import net.minecraft.util.Identifier;

public class ServerSpoof extends Module {

    final BooleanSetting spoofBrand = this.config.create(new BooleanSetting.Builder(true).name("spoof-brand").description("Whether or not to spoof the brand.").get());
    final StringSetting brand = this.config.create(new StringSetting.Builder("vanilla").name("Brand").description("What brand to spoof the client to.").get());
    final BooleanSetting spoofPack = this.config.create(new BooleanSetting.Builder(true).name("spoof-brand").description("Whether or not to spoof the brand.").get());

    public ServerSpoof() {
        super("ServerSpoof", "Spoof client brand, resource pack and channels.", ModuleType.EXPLOIT);
    }

    @MessageSubscription
    private void onPacketSend(PacketEvent.Sent event) {
        if (!isEnabled() || !(event.getPacket() instanceof CustomPayloadC2SPacket)) return;
        Identifier id = ((CustomPayloadC2SPacket) event.getPacket()).payload().getId().id();

        if (spoofBrand.getValue() && id.equals(BrandCustomPayload.ID.id()))
            event.setPacket(new CustomPayloadC2SPacket(new BrandCustomPayload(brand.getValue())));
    }

    @MessageSubscription
    private void onPacketReceive(PacketEvent.Received event) {
        if (!isEnabled()) return;

        if (spoofPack.getValue()) {
            if (!(event.getPacket() instanceof ResourcePackSendS2CPacket packet)) return;
            event.cancel();

            MutableText msg = Text.literal("This server has ");
            msg.append(packet.required() ? "a required " : "an optional ").append("resource pack. ");

            MutableText link = Text.literal("[Download]");
            link.setStyle(link.getStyle()
                    .withColor(Formatting.BLUE)
                    .withUnderline(true)
                    .withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, packet.url()))
                    .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Text.literal("Click to download")))
            );

            MutableText acceptance = Text.literal("[Spoof Acceptance]");
            acceptance.setStyle(acceptance.getStyle()
                    .withColor(Formatting.DARK_GREEN)
                    .withUnderline(true)
                    .withClickEvent(new RunnableClickEvent(() -> {
                        CoffeeMain.client.getNetworkHandler().getConnection().send(new ResourcePackStatusC2SPacket(packet.id(), ResourcePackStatusC2SPacket.Status.ACCEPTED));
                        CoffeeMain.client.getNetworkHandler().getConnection().send(new ResourcePackStatusC2SPacket(packet.id(), ResourcePackStatusC2SPacket.Status.SUCCESSFULLY_LOADED));
                    }))
                    .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Text.literal("Click to spoof accepting the recourse pack.")))
            );

            msg.append(link).append(" ");
            msg.append(acceptance).append(".");
            Utils.Logging.message(msg);
        }
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}
